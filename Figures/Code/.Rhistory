library(tidyverse)
library(here)
library(cowplot)
theme_set(theme_cowplot())
require(RColorBrewer)
library(colorRamps)
library(RCurl)
#stacked bar field
Meta.dat.file <- "MetaData/Ant18_metadata_plots.csv"
dat.filename <- "Intermediates/Quantified_LongDat_perC_Ant18_new.csv"
stds.url <- "https://raw.githubusercontent.com/IngallsLabUW/Ingalls_Standards/master/Ingalls_Lab_Standards_NEW.csv"
#Load up files----
dat <- read_csv(dat.filename) %>%
filter(str_detect(`SampID`, "Sta|Hero|Ev"))
meta.dat <- read_csv(Meta.dat.file)
#Change names
stds.dat <- read.csv(text = getURL(stds.url), header = T) %>%
rename(Identification = Compound.Name_old,
Better_Identification = Compound.Name_figure) %>%
select(Better_Identification, Identification, Emperical.Formula) %>% unique() %>%
mutate(Contains_N = ifelse(str_detect(Emperical.Formula, "N"), "yes", "no")) %>%
mutate(Contains_S = ifelse(str_detect(Emperical.Formula, "S"), "yes", "no"))
#Make the dat file a little easier to work with-----
dat.prep <- dat %>%
rename(CultureID = SampID) %>%
dplyr::select(CultureID, Identification, nmolCave) %>%
left_join(meta.dat, by = "CultureID")
#Replace NAs with 0s, get mean value of the replicates-----
dat.mean <- dat.prep %>%
group_by(Identification, CultureID_short, Org_Name) %>%
mutate(nmolCave = ifelse(is.na(nmolCave), 0 , nmolCave)) %>%
summarise(nmolCave = mean(nmolCave)) %>%
ungroup() %>%
group_by(CultureID_short) %>%
mutate(total_mmol = sum(nmolCave))
dat.mean <- dat.mean %>%
left_join(stds.dat, by = "Identification") %>%
select(-Identification) %>%
rename(Identification = Better_Identification)
dat.mean <- dat.mean %>%
mutate(Identification = ifelse(Contains_N == "yes" & Contains_S == "yes",
paste0(as.character(Identification), " \u2020*"), as.character(Identification))) %>%
mutate(Identification = ifelse(Contains_N == "yes" & Contains_S == "no",
paste0(as.character(Identification), " \u2020"), as.character(Identification))) %>%
mutate(Identification = ifelse(Contains_S == "yes" & Contains_N == "no",
paste0(as.character(Identification), " *"), as.character(Identification)))
#Get good compounds and set order of compounds to highlight.  This highlights the top of each, ordered by the cumulative rank-----
#Top 11 gives 18 compounds
order.of.compounds <- dat.mean %>% ungroup %>%
arrange(CultureID_short, desc(nmolCave)) %>%
group_by(CultureID_short) %>%
mutate(ID_rank = rank(desc(nmolCave))) %>%
mutate(top_ten = ifelse(ID_rank < 11, ID_rank, NA))
order.of.compounds.2 <- order.of.compounds %>%
ungroup() %>%
dplyr::select(ID_rank, Identification, top_ten) %>%
group_by(Identification) %>%
summarise(ID_rank_sum = sum(ID_rank, na.rm = TRUE),
top_ten = sum(top_ten, na.rm = TRUE)) %>%
filter(top_ten > 0) %>%
arrange((ID_rank_sum))
#Get dat.mean of just the top compounds; and dat.mean of the rest----
dat.mean.highlight <-  dat.mean %>%
filter(Identification %in% order.of.compounds.2$Identification)
dat.mean.others <-  dat.mean %>%
filter(!Identification %in% order.of.compounds.2$Identification) %>%
group_by(CultureID_short, Org_Name, total_mmol) %>%
summarise(nmolCave = sum(nmolCave)) %>%
mutate(Identification = "all others")
dat.mean.combo <- rbind(dat.mean.highlight, dat.mean.others)
dat.mean.combo$Identification = factor(dat.mean.combo$Identification,
levels = c(order.of.compounds.2$Identification, "all others"))
dat.mean.combo$Org_name_plots = factor(dat.mean.combo$Org_Name,
levels = unique(meta.dat$Org_Name))
#Name inputs-----
meta.dat.file <- "Metadata/Ant18_metadata_plots.csv"
#meta.dat.file <- "Metadata/Ant18_Metab_metadata.csv"
quan.file <- "Intermediates/Quantified_LongDat_perC_Ant18_new.csv"
stat.file <- "Intermediates/_2021-08-20_anovas_MassFeatures_fdr.csv"
#out of order right now, need wide then fix long
#Load up meta.dat
meta.dat <- read_csv(meta.dat.file) %>%
rename(SampID = CultureID)
#load stat significance list
sig <- read_csv(stat.file)%>%
dplyr::select(-X1)%>%
mutate(MassFeature = List.of.MFs)
#load data
long.dat <- read_csv(quan.file)%>%
filter(str_detect(SampID, "ppt"))%>%
filter(MassFeature %in% sig$List.of.MFs)%>%
left_join(meta.dat, by = "SampID")%>%
group_by(MassFeature, CultureID_short, Sample_type) %>%
summarise(Carbon.Norm.Area = mean(Carbon.Norm.Area)) %>%
ungroup()
#make into a matrix to standardize (z-score right now), Make all NAs into 0s and get rid of MFs that are all 0s, then standardize
wide.dat <- long.dat %>%
pivot_wider(id_cols = MassFeature, names_from = CultureID_short, values_from = Carbon.Norm.Area)
wide.matrix<- wide.dat %>% dplyr::select(-MassFeature) %>% as.matrix()
row.names(wide.matrix) <- wide.dat$MassFeature
compound.all.zeros <- wide.dat %>%
dplyr::select(MassFeature) %>%
mutate(total = rowSums(wide.matrix, na.rm = TRUE)) %>%
filter(total > 0)
wide.matrix.2 <- wide.matrix[compound.all.zeros$MassFeature, ]
wide.matrix.2[is.na(wide.matrix.2)] <- 0
wide.matrix.2.raw <- data.stand((wide.matrix.2), method='standardize', margin='row', plot=F)%>% mutate(names = row.names(wide.matrix.2))
Ev.names <-wide.matrix.2.raw$names
wide.matrix.2.raw <- wide.matrix.2.raw %>% dplyr::select(-names)
row.names(wide.matrix.2.raw) <- Ev.names
#make into plottable shape again
datwidestd<- wide.matrix.2.raw%>%
mutate(MassFeature = rownames(wide.matrix.2.raw))%>%
gather(., key = CultureID_short, value = std_conc, -MassFeature) %>%
mutate(std_conc = ifelse(std_conc == 0, NA, std_conc))%>%
left_join(meta.dat, by = "CultureID_short")%>%
left_join(sig, by = "MassFeature")
#Try ordering by z-score
order<-datwidestd%>%
filter(str_detect(SampID, "50ppt"))%>%
arrange(desc(std_conc))
datwidestd$MassFeature = factor(datwidestd$MassFeature,
levels = unique(order$MassFeature))
# #Try ordering by what treatment peak z score is in
# #group by compound then select highest z-score treatment for each compound
# order<-datwidestd%>%
#   group_by(MassFeature)%>%
#   arrange(desc(std_conc))
#
# #get good order for compounds
# #Load up meta.dat
# meta.dat <- read_csv(meta.dat.file) %>%
#   rename(SampID = CultureID)
#
# #load data
# long.dat <- read_csv(quan.file)%>%
#   filter(str_detect(SampID, "ppt"))%>%
#   filter(MassFeature %in% sig$List.of.MFs)%>%
#   left_join(meta.dat, by = "SampID")
#
# #make into a matrix to standardize
# wide.dat <- long.dat %>%
#   pivot_wider(id_cols = MassFeature, names_from = SampID, values_from = Carbon.Norm.Area)
# wide.matrix<- wide.dat %>% dplyr::select(-MassFeature) %>% as.matrix()
# row.names(wide.matrix) <- wide.dat$MassFeature
# compound.all.zeros <- wide.dat %>%
#   dplyr::select(MassFeature) %>%
#   mutate(total = rowSums(wide.matrix, na.rm = TRUE)) %>%
#   filter(total > 0)
# wide.matrix.2 <- wide.matrix[compound.all.zeros$MassFeature, ]
# wide.matrix.2[is.na(wide.matrix.2)] <- 0
#
# compound.order <- wide.matrix.2%>% as.data.frame()%>%
#   mutate(MassFeature = rownames(wide.matrix.2))%>%
#   gather(., key = SampID, value = std_conc, -MassFeature) %>%
#   mutate(std_conc = ifelse(std_conc == 0, NA, std_conc))%>%
#   left_join(meta.dat, by = "SampID")%>%
#   arrange(desc(std_conc))
#
# datwidestd$MassFeature = factor(datwidestd$MassFeature,
#                                    levels = unique(compound.order$MassFeature))
library(tidyverse)
library(cowplot)
theme_set(theme_cowplot())
library(here)
source('SourceCode/biostats.R')
library("vegan")
library(scales)
library(cowplot)
library(ggplot2)
meta.dat.file <- "Metadata/Ant18_metadata_plots.csv"
#meta.dat.file <- "Metadata/Ant18_Metab_metadata.csv"
quan.file <- "Intermediates/Quantified_LongDat_perC_Ant18_new.csv"
stat.file <- "Intermediates/_2021-08-20_anovas_MassFeatures_fdr.csv"
#out of order right now, need wide then fix long
#Load up meta.dat
meta.dat <- read_csv(meta.dat.file) %>%
rename(SampID = CultureID)
#load stat significance list
sig <- read_csv(stat.file)%>%
dplyr::select(-X1)%>%
mutate(MassFeature = List.of.MFs)
#load data
long.dat <- read_csv(quan.file)%>%
filter(str_detect(SampID, "ppt"))%>%
filter(MassFeature %in% sig$List.of.MFs)%>%
left_join(meta.dat, by = "SampID")%>%
group_by(MassFeature, CultureID_short, Sample_type) %>%
summarise(Carbon.Norm.Area = mean(Carbon.Norm.Area)) %>%
ungroup()
#make into a matrix to standardize (z-score right now), Make all NAs into 0s and get rid of MFs that are all 0s, then standardize
wide.dat <- long.dat %>%
pivot_wider(id_cols = MassFeature, names_from = CultureID_short, values_from = Carbon.Norm.Area)
wide.matrix<- wide.dat %>% dplyr::select(-MassFeature) %>% as.matrix()
row.names(wide.matrix) <- wide.dat$MassFeature
compound.all.zeros <- wide.dat %>%
dplyr::select(MassFeature) %>%
mutate(total = rowSums(wide.matrix, na.rm = TRUE)) %>%
filter(total > 0)
wide.matrix.2 <- wide.matrix[compound.all.zeros$MassFeature, ]
wide.matrix.2[is.na(wide.matrix.2)] <- 0
wide.matrix.2.raw <- data.stand((wide.matrix.2), method='standardize', margin='row', plot=F)%>% mutate(names = row.names(wide.matrix.2))
Ev.names <-wide.matrix.2.raw$names
wide.matrix.2.raw <- wide.matrix.2.raw %>% dplyr::select(-names)
row.names(wide.matrix.2.raw) <- Ev.names
#make into plottable shape again
datwidestd<- wide.matrix.2.raw%>%
mutate(MassFeature = rownames(wide.matrix.2.raw))%>%
gather(., key = CultureID_short, value = std_conc, -MassFeature) %>%
mutate(std_conc = ifelse(std_conc == 0, NA, std_conc))%>%
left_join(meta.dat, by = "CultureID_short")%>%
left_join(sig, by = "MassFeature")
#Try ordering by z-score
order<-datwidestd%>%
filter(str_detect(SampID, "50ppt"))%>%
arrange(desc(std_conc))
datwidestd$MassFeature = factor(datwidestd$MassFeature,
levels = unique(order$MassFeature))
# #Try ordering by what treatment peak z score is in
# #group by compound then select highest z-score treatment for each compound
# order<-datwidestd%>%
#   group_by(MassFeature)%>%
#   arrange(desc(std_conc))
#
# #get good order for compounds
# #Load up meta.dat
# meta.dat <- read_csv(meta.dat.file) %>%
#   rename(SampID = CultureID)
#
# #load data
# long.dat <- read_csv(quan.file)%>%
#   filter(str_detect(SampID, "ppt"))%>%
#   filter(MassFeature %in% sig$List.of.MFs)%>%
#   left_join(meta.dat, by = "SampID")
#
# #make into a matrix to standardize
# wide.dat <- long.dat %>%
#   pivot_wider(id_cols = MassFeature, names_from = SampID, values_from = Carbon.Norm.Area)
# wide.matrix<- wide.dat %>% dplyr::select(-MassFeature) %>% as.matrix()
# row.names(wide.matrix) <- wide.dat$MassFeature
# compound.all.zeros <- wide.dat %>%
#   dplyr::select(MassFeature) %>%
#   mutate(total = rowSums(wide.matrix, na.rm = TRUE)) %>%
#   filter(total > 0)
# wide.matrix.2 <- wide.matrix[compound.all.zeros$MassFeature, ]
# wide.matrix.2[is.na(wide.matrix.2)] <- 0
#
# compound.order <- wide.matrix.2%>% as.data.frame()%>%
#   mutate(MassFeature = rownames(wide.matrix.2))%>%
#   gather(., key = SampID, value = std_conc, -MassFeature) %>%
#   mutate(std_conc = ifelse(std_conc == 0, NA, std_conc))%>%
#   left_join(meta.dat, by = "SampID")%>%
#   arrange(desc(std_conc))
#
# datwidestd$MassFeature = factor(datwidestd$MassFeature,
#                                    levels = unique(compound.order$MassFeature))
#make tile plot
pal <- rev((beyonce_palette(77, 100, type = "continuous")))
metab_tile_exp <- ggplot(stat = "identity", data = datwidestd, aes(x = MassFeature, y = CultureID_short , fill = std_conc)) +
geom_tile(fill = NA) +
geom_tile(colour = NA) +
theme_minimal()+
# facet_wrap(~Sample_type, scale="free_y", nrow=3, switch="y")+
# facet_wrap(~Sig, scale="free_y", nrow=2, switch="y")+
facet_grid(~Sig, scales = "free", space = "free_x")+
scale_fill_gradient2(low="blue", mid="white", high="red",
midpoint=0, limits = c(-1.2, 1.2), breaks = c(-1.2, 0, 1.2))  +
theme(axis.text.x = element_text(angle=-70, hjust=0, size = 9),
axis.line.y = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y=element_text(size=14),
axis.text.y=element_text(size=10),
axis.ticks.y = element_blank(),
strip.background = element_blank(),
strip.text.y = element_text(size = 14, face = "bold", angle=180),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing.x=unit(0.25, "lines"),
panel.spacing.y=unit(0, "lines"),
legend.position = "bottom",
legend.justification="left",
legend.margin=margin(0,0,-15,0),
legend.box.margin=margin(0,0,0,0),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
plot.margin = margin(1, 1, 1, 1, "cm"))+
theme(strip.placement = "outside")+
labs(x ="Metabolite", y = "Treatment", fill = "z-score of concentration")
metab_tile_exp
