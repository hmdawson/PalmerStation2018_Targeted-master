library(vegan)
library(phyloseq)
library(ggplot2)
#library(DESeq2)
library(tidyverse)
library(rstatix)
#library(DESeq2)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
#library(DESeq2)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(rstatix)
library(vegan)
library(phyloseq)
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(ggpubr)
library(RColorBrewer)
library(plyr)
library(pheatmap)
library(cowplot)
#bacteria
unique <- read.csv('2021.02.15_dawson.eukarya.unique_tally.csv', header = T, row.names = 1)
## convert all na's to 0
unique[is.na(unique)] <- 0
taxa <- read.csv('2021.02.15_dawson.eukarya.taxon_map.csv', header = T, row.names = 1, as.is = T)
map <- read.csv('2021.02.15_dawson.eukarya.seq_edge_map.csv',header = T, row.names = 1, as.is = T)
#sample metadata
metadata <- read.csv('dawson_metadata.csv',header = T)
metadata <- metadata[1:63 ,]
#sample metadata
metadata <- read.csv('dawson_metadata.csv',header = T)
View(metadata)
metadata <- metadata[1:63 ,]
mapfile <- map[colnames(unique),]
Yep <- map[colnames(unique), 'global_edge_num']
tax <- taxa[Yep, 'taxon']
tax[tax == ""] <- 'Eukarya'
tax[is.na(tax)] <- 'Eukarya'
mapfile$Taxa <- tax
Fam <-taxa[Yep, 'family']
Fam[Fam == ""] <- 'Eukarya'
Fam[is.na(Fam)] <- 'Eukarya'
mapfile$Family <- Fam
Phylum <- taxa[Yep, 'division']
Phylum[Phylum == ""] <- 'Eukarya'
Phylum[is.na(Phylum)] <- 'Eukarya'
mapfile$Phylum <- Phylum
rm(Fam, Phylum, Yep)
#remove cyanos
unique.qc <- unique
#rename row names
rownames(metadata) <- metadata$paprica_file_18S
rownames(unique.qc) <- metadata[rownames(unique.qc), 'SampleID']
rownames(metadata) <- metadata$SampleID
View(unique.qc)
#limit to station B and carboy samples
unique.select <- unique.qc[grep('B|Carboy', rownames(unique.qc)),]
## remove any low abundance samples (i.e. bad library builds), and also low abundance reads
unique.select <- unique.select[rowSums(unique.select) > 1,]
unique.select <- unique.select[,colSums(unique.select) > 0]
#normalize by sample abundace
unique.s <- unique.select
unique.select <- unique.select/rowSums(unique.select)
library(ggplot2)
library(tidyr)
#change ASV sequences to Phylum classification
s <- unique.select
index <- as.data.frame(colnames(s))
index$phylum <- mapfile[index$`colnames(s)`, 'Phylum']
colnames(s) <- 1:length(s)
View(s)
s.melt <- melt(s)
?melt()
s.melt$SampleID <- rownames(s)
r <- unique.select
colnames(r) <- mapfile[colnames(r), 'Taxa']
hm <- function(x,y) {
x <- x[, colSums(x!=0) > 0]
top_20 <- names(sort(colSums(x), decreasing =TRUE)[1:20])
tally.top <- x[top_20]
pheatmap(t(tally.top), main = y, cex = 1)
}
hm(r, "16S Most Abundant Taxa")
library(phyloseq)
####################### Ordination Plots ############################
Hellinger_unique <- decostand(unique.s, method = "hellinger", na.rm = TRUE)
#transform dataframes into matrices, switching the rows and columns for downstream analyses
Hellinger_unique <- t(Hellinger_unique) #flip
#create OTU matrix
OTUmat <- as.matrix(Hellinger_unique)
#create taxa matrix
taxmat <- as.matrix(mapfile[,4])
#combine into a phyloseq object
OTU = otu_table(OTUmat, taxa_are_rows = TRUE)
TAX = taxa_names(taxmat)
sampledata <- data
physeq = phyloseq(OTU,TAX,sampledata)
physeq
#ordination
theme_set(theme_bw())
ord2 <- ordinate(physeq, "NMDS", "bray")
plot_ordination(physeq, ord2, type="sample_type", color = "TempC") +       geom_point(size=3) +
facet_wrap(~TempC, labeller = depth_labeller) +            theme(legend.position = "top", legend.title = element_blank()) + scale_shape_discrete(labels = c("Shaved", "Not Shaved"))
library(ca)
library(factoextra)
#hellinger transform data
Hellinger_unique <- decostand(unique.s, method = "hellinger", na.rm = TRUE)
Hellinger_unique <- Hellinger_unique[ order(row.names(Hellinger_unique)), ]
#ca
unique.select.ca <- ca(Hellinger_unique)
unique.select.ca.var <- get_eigenvalue(unique.select.ca)
samples.x <- unique.select.ca$rowcoord[,1]
samples.y <- unique.select.ca$rowcoord[,2]
dim.1.var <- round(unique.select.ca.var$variance.percent[1], 1)
dim.2.var <- round(unique.select.ca.var$variance.percent[2], 2)
